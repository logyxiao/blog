---
import { SITE_TITLE } from "../consts";
import { getLangFromUrl, useTranslations, languages, switchLanguage } from "../lib/i18n";
import HeaderLink from "./HeaderLink.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// 为当前语言构建正确的导航链接
const currentLangPrefix = lang === "zh-cn" ? "/zh-cn" : `/${lang}`;

// 生成语言切换链接
const languageLinks = Object.entries(languages).map(([code, name]) => ({
    code,
    name,
    url: switchLanguage(code as keyof typeof languages, Astro.url),
    active: lang === code,
}));
---

<header>
	<nav>
		<h2><a href={lang === "zh-cn" ? "/" : `/${lang}`}>{SITE_TITLE}</a></h2>
		
		<!-- 桌面端导航 -->
		<div class="desktop-nav hidden md:flex">
			<HeaderLink href={`${currentLangPrefix}/`}
				>{t("nav.home")}</HeaderLink
			>
			<HeaderLink href={`${currentLangPrefix}/blog`}
				>{t("nav.blog")}</HeaderLink
			>
			<HeaderLink href={`${currentLangPrefix}/movies`}
				>{t("nav.movies")}</HeaderLink
			>
			<HeaderLink href={`${currentLangPrefix}/about`}
				>{t("nav.about")}</HeaderLink
			>
			
			<!-- 桌面端语言切换 -->
			<div class="language-dropdown">
				<button class="dropdown-trigger" id="language-trigger">
					<span>{t("nav.language")}</span>
					<svg
						class="dropdown-arrow"
						fill="none"
						stroke="currentColor"
						viewBox="0 0 24 24"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M19 9l-7 7-7-7"></path>
					</svg>
				</button>

				<div class="dropdown-menu" id="language-menu">
					{
						languageLinks.map(({ code, name, url, active }) => (
							<a
								href={url}
								class={`dropdown-item ${active ? "active" : ""}`}
								data-lang={code}
							>
								<span class="lang-name">{name}</span>
								{active && (
									<svg
										class="check-icon"
										fill="none"
										stroke="currentColor"
										viewBox="0 0 24 24"
									>
										<path
											stroke-linecap="round"
											stroke-linejoin="round"
											stroke-width="2"
											d="M5 13l4 4L19 7"
										/>
									</svg>
								)}
							</a>
						))
					}
				</div>
			</div>
		</div>

		<!-- 移动端汉堡菜单 -->
		<div class="mobile-nav md:hidden flex px-3 flex items-center">
			<h2><a href={lang === "zh-cn" ? "/" : `/${lang}`}>{SITE_TITLE}</a></h2>
			<button class="hamburger-menu" id="mobile-menu-trigger" aria-label="打开菜单">
				<span class="hamburger-line"></span>
				<span class="hamburger-line"></span>
				<span class="hamburger-line"></span>
			</button>
		</div>
	</nav>
</header>

<!-- 移动端菜单面板 - 移到 header 外部 -->
<div class="mobile-menu-overlay" id="mobile-menu-overlay"></div>
<div class="mobile-menu-panel" id="mobile-menu-panel">
		<div class="mobile-menu-header ">
			<button class="close-button" id="mobile-menu-close" aria-label="关闭菜单">
				<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
				</svg>
			</button>
		</div>
		
		<div class="mobile-menu-content">
			<nav class="mobile-nav-links">
				<a href={`${currentLangPrefix}/`} class="mobile-nav-link">
					<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
					</svg>
					{t("nav.home")}
				</a>
				<a href={`${currentLangPrefix}/blog`} class="mobile-nav-link">
					<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"/>
					</svg>
					{t("nav.blog")}
				</a>
				<a href={`${currentLangPrefix}/movies`} class="mobile-nav-link">
					<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
					</svg>
					{t("nav.movies")}
				</a>
				<a href={`${currentLangPrefix}/about`} class="mobile-nav-link">
					<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
					</svg>
					{t("nav.about")}
				</a>
			</nav>

			<!-- 移动端语言切换 -->
			<div class="mobile-language-section">
				<h4>{t("nav.language")}</h4>
				<div class="mobile-language-options">
					{
						languageLinks.map(({ code, name, url, active }) => (
							<a
								href={url}
								class={`mobile-language-item ${active ? "active" : ""}`}
								data-lang={code}
							>
								<span class="lang-name">{name}</span>
								{active && (
									<svg
										class="check-icon"
										fill="none"
										stroke="currentColor"
										viewBox="0 0 24 24"
										width="16"
										height="16"
									>
										<path
											stroke-linecap="round"
											stroke-linejoin="round"
											stroke-width="2"
											d="M5 13l4 4L19 7"
										/>
									</svg>
								)}
							</a>
						))
					}
				</div>
			</div>
		</div>
	</div>
</div>
<style>
	header {
		margin: 0;
		padding: 0 1em;
		background: hsl(var(--background));
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
		position: sticky;
		top: 0;
		z-index: 100;
		backdrop-filter: blur(10px);
		border-bottom: 1px solid hsl(var(--border));
	}
	
	h2 {
		margin: 0;
		font-size: 1em;
		flex: 1;
		text-align: left;
	}

	h2 a,
	h2 a.active {
		text-decoration: none;
		color: hsl(var(--foreground));
	}
	
	nav {
		display: flex;
		align-items: center;
		justify-content: space-between;
		gap: 1rem;
		min-height: 60px;
		width: 100%;
	}

	/* 桌面端导航样式 */
	.desktop-nav {
		display: flex;
		gap: 0.25rem;
		align-items: center;
	}

	.desktop-nav :global(a) {
		padding: 1em 0.5em;
		color: hsl(var(--foreground));
		border-bottom: 1px solid transparent;
		text-decoration: none;
		font-size: 0.875rem;
		white-space: nowrap;
	}
	
	.desktop-nav :global(a.active) {
		text-decoration: none;
		border-bottom-color: hsl(var(--primary));
	}

	/* 桌面端语言下拉菜单 */
	.language-dropdown {
		position: relative;
		display: inline-block;
	}

	.dropdown-trigger {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.5rem 0.75rem;
		background: none;
		border: none;
		color: hsl(var(--foreground));
		cursor: pointer;
		border-radius: 0.375rem;
		font-size: 0.875rem;
		font-weight: 500;
		transition: all 0.2s ease;
		border: 1px solid transparent;
	}

	.dropdown-trigger:hover {
		background-color: hsl(var(--surface));
		color: hsl(var(--primary));
	}

	.dropdown-arrow {
		width: 1rem;
		height: 1rem;
		transition: transform 0.2s ease;
	}

	.dropdown-menu {
		position: absolute;
		top: 100%;
		right: 0;
		min-width: 8rem;
		background: hsl(var(--card));
		border: 1px solid hsl(var(--border));
		border-radius: 0.5rem;
		padding: 0.5rem;
		margin-top: 0.25rem;
		opacity: 0;
		visibility: hidden;
		transform: translateY(-0.5rem);
		transition: all 0.2s ease;
		z-index: 110;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
	}

	.dropdown-menu.show {
		opacity: 1;
		visibility: visible;
		transform: translateY(0);
	}

	.dropdown-item {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		padding: 0.5rem 0.75rem;
		text-decoration: none;
		color: hsl(var(--foreground));
		border-radius: 0.375rem;
		transition: all 0.2s ease;
		font-size: 0.875rem;
	}

	.dropdown-item:hover {
		background-color: hsl(var(--surface));
		color: hsl(var(--primary));
	}

	.dropdown-item.active {
		background-color: hsl(var(--primary));
		color: hsl(var(--primary-foreground));
	}

	.dropdown-item.active:hover {
		background-color: hsl(var(--primary-hover));
	}

	.lang-name {
		flex: 1;
	}

	.check-icon {
		width: 1rem;
		height: 1rem;
		flex-shrink: 0;
	}

	/* 移动端显示控制 */
	.mobile-nav {
		display: flex;
		align-items: center;
		justify-content: flex-end;
		flex-shrink: 0;
	}

	/* 桌面端隐藏移动端菜单 */
	@media (min-width: 768px) {
		.mobile-nav {
			display: none;
		}
		
	}

	/* 汉堡菜单样式 */
	.hamburger-menu {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		width: 40px;
		height: 40px;
		background: none;
		border: none;
		cursor: pointer;
		padding: 8px;
		border-radius: 6px;
		transition: background-color 0.2s ease;
	}

	.hamburger-menu:hover {
		background-color: hsl(var(--surface));
	}

	.hamburger-line {
		width: 24px;
		height: 2px;
		background-color: hsl(var(--foreground));
		margin: 2px 0;
		transition: all 0.3s ease;
		transform-origin: center;
	}

	.hamburger-menu.active .hamburger-line:nth-child(1) {
		transform: rotate(45deg) translate(5px, 5px);
	}

	.hamburger-menu.active .hamburger-line:nth-child(2) {
		opacity: 0;
	}

	.hamburger-menu.active .hamburger-line:nth-child(3) {
		transform: rotate(-45deg) translate(7px, -6px);
	}

	/* 移动端菜单遮罩 */
	.mobile-menu-overlay {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: rgba(0, 0, 0, 0.6);
		opacity: 0;
		visibility: hidden;
		transition: all 0.3s ease;
		z-index: 200;
	}

	.mobile-menu-overlay.show {
		opacity: 1;
		visibility: visible;
	}

	/* 移动端菜单面板 */
	.mobile-menu-panel {
		position: fixed;
		top: 0;
		right: 0;
		bottom: 0;
		width: 200px;
		max-width: 80vw;
		background: hsl(var(--background));
		box-shadow: -4px 0 20px rgba(0, 0, 0, 0.15);
		transform: translateX(100%);
		transition: transform 0.3s ease;
		z-index: 201;
		overflow-y: auto;
		border-left: 1px solid hsl(var(--border));
	}

	.mobile-menu-panel.show {
		transform: translateX(0);
	}

	.mobile-menu-header {
		display: flex;
		align-items: center;
		justify-content: end;
		padding: 1rem 1.5rem;
		border-bottom: 1px solid hsl(var(--border));
		background: hsl(var(--surface));
	}

	.mobile-menu-header h3 {
		margin: 0;
		font-size: 1.1rem;
		font-weight: 600;
		color: hsl(var(--foreground));
	}

	.close-button {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 28px;
		height: 28px;
		background: none;
		border: none;
		cursor: pointer;
		border-radius: 6px;
		color: hsl(var(--muted-foreground));
		transition: all 0.2s ease;
	}

	.close-button:hover {
		background-color: hsl(var(--surface));
		color: hsl(var(--foreground));
	}

	.mobile-menu-content {
		padding: 0;
		width: 100%;
	}

	/* 移动端导航链接 */
	.mobile-nav-links {
		display: flex;
		flex-direction: column;
		margin: 0;
		padding: 0.2rem 0;
		border-bottom: 1px solid hsl(var(--border));
	}

	.mobile-nav-link {
		display: flex;
		align-items: center;
		gap: 1rem;
		padding: 1rem 1.5rem;
		margin: 0;
		text-decoration: none;
		color: hsl(var(--foreground));
		transition: all 0.2s ease;
		font-weight: 500;
		font-size: 1rem;
		min-height: 56px;
		border-bottom: 1px solid hsl(var(--border) / 0.3);
	}

	.mobile-nav-link:hover {
		background-color: hsl(var(--surface));
		color: hsl(var(--primary));
	}

	.mobile-nav-link:last-child {
		border-bottom: none;
	}

	.mobile-nav-link svg {
		color: hsl(var(--muted-foreground));
		transition: color 0.2s ease;
		width: 20px;
		height: 20px;
		flex-shrink: 0;
	}

	.mobile-nav-link:hover svg {
		color: hsl(var(--primary));
	}

	/* 移动端语言切换 */
	.mobile-language-section {
		padding: 1rem;
		background: hsl(var(--surface) / 0.5);
	}

	.mobile-language-section h4 {
		margin: 0 0 1rem 0;
		font-size: 0.875rem;
		font-weight: 600;
		color: hsl(var(--muted-foreground));
		text-transform: uppercase;
		letter-spacing: 0.05em;
		padding-left: 0.25rem;
	}

	.mobile-language-options {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.mobile-language-item {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 0.7rem 1.5rem;
		text-decoration: none;
		color: hsl(var(--foreground));
		border-radius: 0;
		transition: all 0.2s ease;
		min-height: 40px;
		background: transparent;
		border: none;
		border-bottom: 1px solid hsl(var(--border) / 0.3);
		font-weight: 500;
		font-size: 1rem;
		width: 100%;
	}

	.mobile-language-item:last-child {
		border-bottom: none;
	}

	.mobile-language-item:hover {
		background-color: hsl(var(--surface));
		color: hsl(var(--primary));
	}

	.mobile-language-item.active {
		background-color: hsl(var(--primary));
		color: hsl(var(--primary-foreground));
	}

	.mobile-language-item.active:hover {
		background-color: hsl(var(--primary-hover));
	}

	/* 响应式设计 */
	@media (max-width: 768px) {
		header {
			padding: 0 0.75rem;
		}
		
		nav {
			gap: 0.5rem;
			min-height: 56px;
		}
		
		h2 {
			font-size: 0.9rem;
		}
	}
	
	@media (max-width: 480px) {.desktop-nav {
			display: none;
		}
		header {
			padding: 0 0.5rem;
		}
		
		h2 {
			font-size: 1rem;
		}
	}
</style>

<script>
	// 移动端菜单交互
	document.addEventListener("DOMContentLoaded", () => {
		// 移动端菜单元素
		const mobileMenuTrigger = document.getElementById("mobile-menu-trigger");
		const mobileMenuOverlay = document.getElementById("mobile-menu-overlay");
		const mobileMenuPanel = document.getElementById("mobile-menu-panel");
		const mobileMenuClose = document.getElementById("mobile-menu-close");

		// 桌面端语言下拉菜单元素
		const languageTrigger = document.getElementById("language-trigger");
		const languageMenu = document.getElementById("language-menu");

		// 移动端菜单功能
		if (mobileMenuTrigger && mobileMenuOverlay && mobileMenuPanel && mobileMenuClose) {
			// 打开菜单
			const openMobileMenu = () => {
				mobileMenuTrigger.classList.add("active");
				mobileMenuOverlay.classList.add("show");
				mobileMenuPanel.classList.add("show");
				document.body.style.overflow = "hidden"; // 防止背景滚动
			};

			// 关闭菜单
			const closeMobileMenu = () => {
				mobileMenuTrigger.classList.remove("active");
				mobileMenuOverlay.classList.remove("show");
				mobileMenuPanel.classList.remove("show");
				document.body.style.overflow = ""; // 恢复滚动
			};

			// 绑定事件
			mobileMenuTrigger.addEventListener("click", openMobileMenu);
			mobileMenuClose.addEventListener("click", closeMobileMenu);
			mobileMenuOverlay.addEventListener("click", closeMobileMenu);

			// 点击菜单内链接时关闭菜单
			const mobileNavLinks = mobileMenuPanel.querySelectorAll(".mobile-nav-link, .mobile-language-item");
			mobileNavLinks.forEach(link => {
				link.addEventListener("click", closeMobileMenu);
			});

			// ESC键关闭菜单
			document.addEventListener("keydown", (e) => {
				if (e.key === "Escape" && mobileMenuPanel.classList.contains("show")) {
					closeMobileMenu();
				}
			});
		}

		// 桌面端语言下拉菜单功能
		if (languageTrigger && languageMenu) {
			// 切换下拉菜单显示
			const toggleLanguageMenu = () => {
				languageMenu.classList.toggle("show");
				const arrow = languageTrigger.querySelector(".dropdown-arrow");
				if (arrow) {
					arrow.style.transform = languageMenu.classList.contains("show")
						? "rotate(180deg)"
						: "";
				}
			};

			// 关闭下拉菜单
			const closeLanguageMenu = () => {
				languageMenu.classList.remove("show");
				const arrow = languageTrigger.querySelector(".dropdown-arrow");
				if (arrow) {
					arrow.style.transform = "";
				}
			};

			// 点击触发器
			languageTrigger.addEventListener("click", (e) => {
				e.preventDefault();
				e.stopPropagation();
				toggleLanguageMenu();
			});

			// 点击外部关闭菜单
			document.addEventListener("click", (e) => {
				const languageDropdown = languageTrigger.closest(".language-dropdown");
				if (languageDropdown && !languageDropdown.contains(e.target)) {
					closeLanguageMenu();
				}
			});

			// ESC键关闭下拉菜单
			document.addEventListener("keydown", (e) => {
				if (e.key === "Escape" && languageMenu.classList.contains("show")) {
					closeLanguageMenu();
				}
			});

			// 处理语言切换
			const languageLinks = languageMenu.querySelectorAll(".dropdown-item");
			languageLinks.forEach((link) => {
				link.addEventListener("click", (e) => {
					const href = link.getAttribute("href");
					if (href) {
						// 直接跳转到新的语言页面
						window.location.href = href;
					}
				});
			});
		}

		// 处理窗口大小变化
		let resizeTimeout;
		window.addEventListener("resize", () => {
			clearTimeout(resizeTimeout);
			resizeTimeout = setTimeout(() => {
				// 如果切换到桌面端，关闭移动端菜单
				if (window.innerWidth >= 768) {
					if (mobileMenuPanel && mobileMenuPanel.classList.contains("show")) {
						mobileMenuTrigger.classList.remove("active");
						mobileMenuOverlay.classList.remove("show");
						mobileMenuPanel.classList.remove("show");
						document.body.style.overflow = "";
					}
				}
				// 如果切换到移动端，关闭桌面端语言菜单
				if (window.innerWidth < 768) {
					if (languageMenu && languageMenu.classList.contains("show")) {
						languageMenu.classList.remove("show");
						const arrow = languageTrigger.querySelector(".dropdown-arrow");
						if (arrow) {
							arrow.style.transform = "";
						}
					}
				}
			}, 150);
		});
	});
</script>
